<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="org.iclass.board.dao.CommunityMapper">

 	<insert id="insert" parameterType="CommunityDTO"
 	                        useGeneratedKeys="false" >
 	<!-- 오라클은 idx를 시퀀스를 이용하여 값을 만듭니다. 
 	    useGeneratedKeys="false"  -->
 		INSERT INTO community
 			(idx,writer,title,content,ip) 
		VALUES 
			(community_idx_seq.nextval,
					#{writer},#{title},	#{content},	#{ip, jdbcType=VARCHAR})
	<!-- insert 후에 증가된 시퀀스값 (insert 된 idx값) 가져오기 
			: 파라미터 "dto에 idx 필드"(keyProperty="idx")에 저장하기
		//sql에서 insert 후의 시퀀스의 currval 를 idx프로퍼티에 저장.		
	-->	
		<selectKey keyProperty="idx" resultType="int" order="AFTER">
			SELECT community_idx_seq.currval 
			FROM dual
		</selectKey>	
 	</insert>  
 	<!-- null 허용한 컬럼은 타입을 알려주어 NULL 이 입력되도록 한다. -->
 	<!--0. 메인글 수정-->
 	<update id="update" parameterType="CommunityDTO">
	 	UPDATE community
		SET 
			title=#{title}, content=#{content} ,ip=#{ip,jdbcType=VARCHAR}
		WHERE 
			idx=#{idx}
 	</update>
 	<!--0. 메인글 삭제-->
 	<delete id="delete" parameterType="int">
 		DELETE FROM 
 			community 
 		WHERE 
 			idx=#{idx}
 	</delete>
 	<!--1. 글 상세보기-->
 	<select id="selectByIdx" parameterType="int" 
 			resultType="CommunityDTO">
 		SELECT * 
 		FROM 
 			community 
 		WHERE 
 			idx=#{idx}   <!-- PK로 조회 -->
 	</select>
 	
 	<!--2. 댓글 목록 : 매퍼 xml 을 따로 만들기 -->
 	<!--3. 메인글 목록 전체 개수 구하기 : 전체개수 /10 은 페이지개수 -->
 	<select id="getCount" resultType="int"
			parameterType="PageRequestDTO">
 		SELECT count(*) FROM community
		<include refid="search"/>
 	</select>
 	
 	<!--4. 댓글 갯수 구하기-->
 	<select id="getCommentCount" resultType="int" parameterType="int">
 		SELECT count(*) 
 		FROM communityComments
 		where mref=#{mref}
 	</select>
 	
    <!--#5:메인글 조회수-->
   <update id="setReadCount" parameterType="int">
      update community set readCount = readCount + 1 where idx = #{idx}
   </update>
   
   <!--#6:댓글 개수 // 쿼리 수정이 필요 => 댓글 삭제 시 빼야함(별도 쿼리로 작성하기로)-->
   <update id="setCommentCount" parameterType="int">
      update community set commentCount = commentCount + 1 where idx = #{idx}
   </update>

   <!--#7: 페이지 별 글목록 20개씩 조회-->
   <select id="getList" parameterType="PageRequestDTO"
   						resultType="CommunityDTO">
      select * from
          (select rownum rnum, temp.* from
              (select * from community 
                        <include refid="search"/>
                        order by idx desc) temp)
      where rnum between #{startNo} and #{endNo}
   </select>

 <!-- 8. 위의 getList 쿼리에 추가될 조건식(where) : 동적 쿼리
         전달된 파라미터 types 배열, keyword 문자열
 -->
	<sql id="search">  
	/* 전체 검색행의 갯수, 검색목록 에서 사용합니다.*/
			<where>
			<if test="types!=null and types.length >0">
				/* types 배열의 요소를 하나씩 가져와 type 변수에 저장*/
				<foreach collection="types" item="type"
				    separator="OR" open="(" close=")">
					<if test="type=='t'.toString()">
						title like '%' || #{keyword} || '%'
					</if>
					<if test="type=='w'.toString()">
						writer like '%'|| #{keyword} || '%'
					</if>
					<if test="type=='c'.toString()">
						content like '%'|| #{keyword} || '%'
					</if>
				</foreach>
			</if>
			</where>
	</sql>

 	
 </mapper>
 
 
 
 
 
 